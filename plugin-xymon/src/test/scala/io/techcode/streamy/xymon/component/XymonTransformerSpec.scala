/*
 * The MIT License (MIT)
 * <p>
 * Copyright (c) 2018
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package io.techcode.streamy.xymon.component

import akka.NotUsed
import akka.stream.scaladsl.Flow
import akka.util.ByteString
import io.techcode.streamy.component.TestTransformer
import io.techcode.streamy.event.StreamEvent
import io.techcode.streamy.util.json._


/**
  * Xymon transformer spec.
  */
class XymonTransformerSpec extends TestTransformer {
  "Xymon transformer" should {
    "print and parse data correctly" in {
      except(
        XymonTransformerSpec.Transformer,
        XymonTransformerSpec.Input,
        XymonTransformerSpec.Input
      )
    }

    "print data correctly" in {
      except(
        XymonTransformerSpec.Printer.Transformer,
        XymonTransformerSpec.Printer.Input,
        XymonTransformerSpec.Printer.Output
      )
    }

    "print data correctly with defaults" in {
      except(
        XymonTransformerSpec.Printer.TransformerWithDefault,
        XymonTransformerSpec.Printer.Input,
        XymonTransformerSpec.Printer.OutputWithDefault
      )
    }

    "parse data correctly" in {
      except(
        XymonTransformerSpec.Parser.Transformer,
        XymonTransformerSpec.Parser.Input,
        XymonTransformerSpec.Parser.Output
      )
    }

    "fail on bad input" in {
      exceptError(
        XymonTransformerSpec.Parser.Transformer,
        XymonTransformerSpec.Parser.BadInput,
      )
    }
  }
}

object XymonTransformerSpec {

  val Input: StreamEvent = StreamEvent(Json.obj(
    "host" -> "www,example,com",
    "lifetime" -> "30m",
    "group" -> "test-group",
    "service" -> "cpu",
    "color" -> "red",
    "message" -> "Message generated by test-host"
  ))

  val Transformer: Flow[StreamEvent, StreamEvent, NotUsed] =
    Printer.Transformer.via(Parser.Transformer)

  object Printer {
    val Input: StreamEvent = StreamEvent(Json.obj(
      "host" -> "www,example,com",
      "lifetime" -> "30m",
      "group" -> "test-group",
      "service" -> "http",
      "color" -> "red",
      "message" -> "Message generated by test-host"
    ))

    val Transformer: Flow[StreamEvent, ByteString, NotUsed] =
      XymonTransformer.printer(XymonTransformer.Printer.Config(
        binding = XymonTransformer.Printer.Binding(
          lifetime = Some("lifetime"),
          host = Some("host"),
          service = Some("service"),
          color = Some("color"),
          group = Some("group"),
          message = Some("message")
        )
      ))

    val TransformerWithDefault: Flow[StreamEvent, ByteString, NotUsed] =
      XymonTransformer.printer(XymonTransformer.Printer.Config(
        binding = XymonTransformer.Printer.Binding(
          lifetime = None,
          host = None,
          service = None,
          color = None,
          group = None,
          message = None
        )
      ))

    val Output: ByteString = ByteString("status+30m/group:test-group www,example,com.http red Message generated by test-host")

    val OutputWithDefault: ByteString = ByteString("status www,example,com.streamy red")
  }

  object Parser {
    //status+30m/group:testgroup www,example,com.service red Message generated by test-host
    val Input: ByteString = ByteString("status+30m/group:test www,example,com.http red Message generated by test-host")

    //+30m/group:testgroup www,example,com.service red Message generated by test-host
    val BadInput: ByteString = ByteString("+30m/group:test www,example,com.http red Message generated by test-host")

    val Transformer: Flow[ByteString, StreamEvent, NotUsed] =
      XymonTransformer.parser(XymonTransformer.Parser.Config(
        binding = XymonTransformer.Parser.Binding(
          lifetime = Some("lifetime"),
          host = Some("host"),
          service = Some("service"),
          color = Some("color"),
          group = Some("group"),
          message = Some("message")
        )
      ))

    val Output: StreamEvent = StreamEvent(Json.obj(
      "host" -> "www,example,com",
      "lifetime" -> "30m",
      "group" -> "test",
      "service" -> "http",
      "color" -> "red",
      "message" -> "Message generated by test-host"
    ))
  }

}
