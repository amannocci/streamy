# Akka settings
akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream. It can perform
  # fine grained filtering based on the log source. The default
  # implementation filters on the `loglevel`.
  # FQCN of the LoggingFilter. The Class of the FQCN must implement
  # akka.event.LoggingFilter and have a public constructor with
  # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "info"

  # This will be used if you have set "executor = "fork-join-executor""
  # Underlying thread pool implementation is akka.dispatch.forkjoin.ForkJoinPool
  actor.default-dispatcher.fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2

    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 2.0

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = ${?JVM_CPU_LIMIT_X2}

    # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
    # like peeking mode which "pop".
    task-peeking-mode = "FIFO"
  }
}

# Streamy settings
streamy {
  metric {
    initial-delay = -1s
    interval = 10s
    external = false
  }

  lifecycle {
    graceful-timeout = 10s
    shutdown-timeout = 15s
  }
}

# Bind env variables
streamy {
  metric {
    initial-delay = ${?STREAMY_METRIC_INITIAL_DELAY}
    interval = ${?STREAMY_METRIC_INTERVAL}
    external = ${?STREAMY_METRIC_EXTERNAL}
  }

  lifecycle {
    graceful-timeout = ${?STREAMY_LIFECYCLE_GRACEFUL_TIMEOUT}
    shutdown-timeout = ${?STREAMY_LIFECYCLE_SHUTDOWN_TIMEOUT}
  }
}
