{"kind": "Listing", "data": {"modhash": "", "dist": 27, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "Hello /r/Scala,  \n\nThis is a biweekly thread where we come to discuss, show off, or get help on projects we're working on these days.  \n\nThis is not a place for general discussion, for that, see our [general discussion threads](https://www.reddit.com/r/scala/search?q=Got+a+quick+question%3F&amp;sort=new&amp;restrict_sr=on&amp;t=all)  \n\n[Previous threads](https://www.reddit.com/r/scala/search?q=what+are+you+working+on&amp;sort=new&amp;restrict_sr=on&amp;t=all)\n\nThanks!", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What are you working on? April 01, 2019", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b81jcb", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1554120818.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"/r/Scala\"&gt;/r/Scala&lt;/a&gt;,  &lt;/p&gt;\n\n&lt;p&gt;This is a biweekly thread where we come to discuss, show off, or get help on projects we&amp;#39;re working on these days.  &lt;/p&gt;\n\n&lt;p&gt;This is not a place for general discussion, for that, see our &lt;a href=\"https://www.reddit.com/r/scala/search?q=Got+a+quick+question%3F&amp;amp;sort=new&amp;amp;restrict_sr=on&amp;amp;t=all\"&gt;general discussion threads&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/scala/search?q=what+are+you+working+on&amp;amp;sort=new&amp;amp;restrict_sr=on&amp;amp;t=all\"&gt;Previous threads&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b81jcb", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "num_crossposts": 0, "num_comments": 3, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b81jcb/what_are_you_working_on_april_01_2019/", "whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/scala/comments/b81jcb/what_are_you_working_on_april_01_2019/", "subreddit_subscribers": 21294, "created_utc": 1554120818.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "Hello /r/Scala,  \n\nThis is a thread where you can ask any question, no matter if you are just starting, or are a long-time contributor to the compiler.  \n\nAlso feel free to post general discussion.     \n\n[Previous discussions](https://www.reddit.com/r/scala/search?q=Got+a+quick+question%3F&amp;sort=new&amp;restrict_sr=on&amp;t=all)  \n\nThanks!\n", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Got a quick question? Ask here - March 25, 2019", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b59xvm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553516087.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello &lt;a href=\"/r/Scala\"&gt;/r/Scala&lt;/a&gt;,  &lt;/p&gt;\n\n&lt;p&gt;This is a thread where you can ask any question, no matter if you are just starting, or are a long-time contributor to the compiler.  &lt;/p&gt;\n\n&lt;p&gt;Also feel free to post general discussion.     &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/scala/search?q=Got+a+quick+question%3F&amp;amp;sort=new&amp;amp;restrict_sr=on&amp;amp;t=all\"&gt;Previous discussions&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b59xvm", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "num_crossposts": 0, "num_comments": 11, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b59xvm/got_a_quick_question_ask_here_march_25_2019/", "whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/scala/comments/b59xvm/got_a_quick_question_ask_here_march_25_2019/", "subreddit_subscribers": 21294, "created_utc": 1553516087.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_sqhwjw6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Alphabet Soup: Type mixing at compile time", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b8g4dy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "domain": "medium.com", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1554191061.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b8g4dy", "is_robot_indexable": true, "report_reasons": null, "author": "Jdrphillips-scala", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b8g4dy/alphabet_soup_type_mixing_at_compile_time/", "whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@jdrphillips/alphabet-soup-type-level-transformations-eb60918af35d", "subreddit_subscribers": 21294, "created_utc": 1554191061.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "Alright folks! FREE course First Steps in Scala is out LIVE NOW!\n\nIf you are planning to learn #scala or #functionalprogramming, please check it out.\n\nDo share it if you find value in the course.\n\nThank you from teambonsaii\n\n[https://bonsaiilabs.thinkific.com/courses/first-steps-in-scala](https://bonsaiilabs.thinkific.com/courses/first-steps-in-scala)\n\n&amp;#x200B;\n\n[https:\\/\\/bonsaiilabs.thinkific.com\\/courses\\/first-steps-in-scala](https://i.redd.it/ijwc8xvhgpp21.png)\n\n&amp;#x200B;", "author_fullname": "t2_458pa", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "FREE course First Steps in Scala is out LIVE NOW!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "media_metadata": {"ijwc8xvhgpp21": {"status": "valid", "e": "Image", "s": {"y": 1398, "x": 1208, "u": "https://i.redd.it/ijwc8xvhgpp21.png"}, "m": "image/png", "id": "ijwc8xvhgpp21"}}, "name": "t3_b87ka3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1554147385.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Alright folks! FREE course First Steps in Scala is out LIVE NOW!&lt;/p&gt;\n\n&lt;p&gt;If you are planning to learn #scala or #functionalprogramming, please check it out.&lt;/p&gt;\n\n&lt;p&gt;Do share it if you find value in the course.&lt;/p&gt;\n\n&lt;p&gt;Thank you from teambonsaii&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://bonsaiilabs.thinkific.com/courses/first-steps-in-scala\"&gt;https://bonsaiilabs.thinkific.com/courses/first-steps-in-scala&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://i.redd.it/ijwc8xvhgpp21.png\"&gt;https://bonsaiilabs.thinkific.com/courses/first-steps-in-scala&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b87ka3", "is_robot_indexable": true, "report_reasons": null, "author": "harit66", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b87ka3/free_course_first_steps_in_scala_is_out_live_now/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b87ka3/free_course_first_steps_in_scala_is_out_live_now/", "subreddit_subscribers": 21294, "created_utc": 1554147385.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "\nPlease post the job with the following template:\n\n    Company Name | Title(s) of position(s) being hired for | City, [State/Province,] Country | {ONSITE, REMOTE} | {Full Time, Part Time, Contract} | (Optional) $approximate salary\n    \n    description\n    \n    contact information\n\nPosters: Please only post if you are personally involved in the hiring party -- no 3rd party recruiters (you must post the name of the company)\n\nReaders: please only email submitters if you personally are interested in the job\u2014no recruiters or sales calls.\n  \n[Previous discussions](https://www.reddit.com/r/scala/search?q=who+is+hiring&amp;sort=new&amp;restrict_sr=on&amp;t=all)  \n\nThanks!\n", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who is hiring? Monthly /r/Scala Job Postings Thread (April 2019 Edition)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b81jah", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1554120811.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Please post the job with the following template:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Company Name | Title(s) of position(s) being hired for | City, [State/Province,] Country | {ONSITE, REMOTE} | {Full Time, Part Time, Contract} | (Optional) $approximate salary\n\ndescription\n\ncontact information\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Posters: Please only post if you are personally involved in the hiring party -- no 3rd party recruiters (you must post the name of the company)&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email submitters if you personally are interested in the job\u2014no recruiters or sales calls.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/scala/search?q=who+is+hiring&amp;amp;sort=new&amp;amp;restrict_sr=on&amp;amp;t=all\"&gt;Previous discussions&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b81jah", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "num_crossposts": 0, "num_comments": 6, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b81jah/who_is_hiring_monthly_rscala_job_postings_thread/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b81jah/who_is_hiring_monthly_rscala_job_postings_thread/", "subreddit_subscribers": 21294, "created_utc": 1554120811.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "I've been trying to google the answer to this problem and nearly all the results have to do with passing functions to something else.\n\nBasically all I'm trying to accomplish is this:\n\n    def shrink_data( sql_df ):\n        //do some things - similar to:\n        small_df = sql_df.take(4)\n        return small_df\n\nBasically we're trying to implement a \"testing\" boolean flag in our data pipeline so that when True, the pipeline will instead produce a smaller data set which is easily processed by the rest of the pipeline and we can test that everything is working together without waiting 8-12 hours for the entire pipeline to finish. \n\nAny advice? This seems like a simple problem but for some reason I'm having trouble googling the answer. \n\nThis is what I'm using. Not sure if this is wildly inefficient though...\n\n    object shrinker {\n       def shrink(x: Array[Row]) = {\n          val b = x.take(1)\n          display(b)\n      \n       }\n    }", "author_fullname": "t2_2ju9bjrp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it unusual to pass a spark dataframe to a function? Not sure why this is so hard to google...", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b836jn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "thumbnail": "", "edited": true, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1554129334.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been trying to google the answer to this problem and nearly all the results have to do with passing functions to something else.&lt;/p&gt;\n\n&lt;p&gt;Basically all I&amp;#39;m trying to accomplish is this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def shrink_data( sql_df ):\n    //do some things - similar to:\n    small_df = sql_df.take(4)\n    return small_df\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically we&amp;#39;re trying to implement a &amp;quot;testing&amp;quot; boolean flag in our data pipeline so that when True, the pipeline will instead produce a smaller data set which is easily processed by the rest of the pipeline and we can test that everything is working together without waiting 8-12 hours for the entire pipeline to finish. &lt;/p&gt;\n\n&lt;p&gt;Any advice? This seems like a simple problem but for some reason I&amp;#39;m having trouble googling the answer. &lt;/p&gt;\n\n&lt;p&gt;This is what I&amp;#39;m using. Not sure if this is wildly inefficient though...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;object shrinker {\n   def shrink(x: Array[Row]) = {\n      val b = x.take(1)\n      display(b)\n\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b836jn", "is_robot_indexable": true, "report_reasons": null, "author": "FamousJackfruit", "num_crossposts": 0, "num_comments": 6, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b836jn/is_it_unusual_to_pass_a_spark_dataframe_to_a/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b836jn/is_it_unusual_to_pass_a_spark_dataframe_to_a/", "subreddit_subscribers": 21294, "created_utc": 1554129334.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_4hxdu", "saved": false, "mod_reason_title": null, "gilded": 1, "clicked": false, "title": "Abstraction and Learning with Runar Bjarnason", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b7r0yk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 71, "domain": "corecursive.com", "media_embed": [], "author_flair_template_id": "3851fdf8-b7f4-11e5-b6b4-0edfaf1a52fb", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": "slick-logo-flair", "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 1, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1554057445.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "", "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b7r0yk", "is_robot_indexable": true, "report_reasons": null, "author": "agbell", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/scala/comments/b7r0yk/abstraction_and_learning_with_runar_bjarnason/", "whitelist_status": "all_ads", "stickied": false, "url": "https://corecursive.com/027-abstraction-with-runar-bjarnason/", "subreddit_subscribers": 21294, "created_utc": 1554057445.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "Ideally I'd like to use play-json with akka-http because I'm under the impression it's easier to read with their macros and json parsing. Examples being when defining json formats in spray-json `jsonFormatX`is used where X is the number of fields. Example being \n\n    final case class Item(name: String, id: Long)\n    implicit val itemFormat = jsonFormat2(Item)\n \nIn play-json this would just be Json.format[Item]. \n\nParsing json in general seems to be simpler in play-json as well. \n\nDisclaimer: I am used to the play framework and am now looking at projects that use only akka-http + spray-json", "author_fullname": "t2_3ime16of", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there a performance hit using play-json with akka-http than using spray-json?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b7sey9", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1554064551.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Ideally I&amp;#39;d like to use play-json with akka-http because I&amp;#39;m under the impression it&amp;#39;s easier to read with their macros and json parsing. Examples being when defining json formats in spray-json &lt;code&gt;jsonFormatX&lt;/code&gt;is used where X is the number of fields. Example being &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;final case class Item(name: String, id: Long)\nimplicit val itemFormat = jsonFormat2(Item)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In play-json this would just be Json.format[Item]. &lt;/p&gt;\n\n&lt;p&gt;Parsing json in general seems to be simpler in play-json as well. &lt;/p&gt;\n\n&lt;p&gt;Disclaimer: I am used to the play framework and am now looking at projects that use only akka-http + spray-json&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b7sey9", "is_robot_indexable": true, "report_reasons": null, "author": "covertbeginner2", "num_crossposts": 0, "num_comments": 5, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b7sey9/is_there_a_performance_hit_using_playjson_with/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b7sey9/is_there_a_performance_hit_using_playjson_with/", "subreddit_subscribers": 21294, "created_utc": 1554064551.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_13b0nl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Homegrown Scala Collections - Part 29 - Are Views Typeclasses?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b7mugp", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "domain": "youtu.be", "media_embed": [{"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/e92_JOZYUT0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "title": "Homegrown #Scala Collections - Part 29 - Are Views Typeclasses?", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/e92_JOZYUT0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "DevInsideYou", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/e92_JOZYUT0/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCSBUwLT9zXhUalKfJrc2q2A"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/e92_JOZYUT0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/b7mugp", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1554032251.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b7mugp", "is_robot_indexable": true, "report_reasons": null, "author": "agilesteel", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b7mugp/homegrown_scala_collections_part_29_are_views/", "whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/e92_JOZYUT0", "subreddit_subscribers": 21294, "created_utc": 1554032251.0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "title": "Homegrown #Scala Collections - Part 29 - Are Views Typeclasses?", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/e92_JOZYUT0?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "DevInsideYou", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/e92_JOZYUT0/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCSBUwLT9zXhUalKfJrc2q2A"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "All the videos of ScalaUA conference can be seen at\n\nhttps://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg/videos\n\nand \n\nhttps://old.reddit.com/r/ScalaConferenceVideos/\n\nSince this conference has exceptionally good topic selection, I am listing down the urls to all the talks below\n\n[Thinking Functionally - John A. De Goes](https://www.youtube.com/watch?v=-KA3BSdqYug&amp;t=1s)\n\n[Big Step to Functional Programming - Alex Zvolinskiy](https://www.youtube.com/watch?v=9-2uOyRec_I)\n\n[Scheduling and retrying effects with cats - Mikl\u00f3s Martin](https://www.youtube.com/watch?v=AOaE0-9MYVM)\n\n[Conquering Concurrency with Functional Programming - Jakub Koz\u0142owski](https://www.youtube.com/watch?v=6z6C1EmxzaI)\n\n[Scala Schemas with Shapeless - K\u00e9vin Rauscher](https://www.youtube.com/watch?v=rzBWevKiVFI)\n\n[Backpressure over the wire - when things go wrong - Zahari Dichev](https://www.youtube.com/watch?v=32RZoQOaucM)\n\n[Things I wish I knew when I started with Akka - Markus Jura](https://www.youtube.com/watch?v=cUG_G8ihL4Y)\n\n[Tour of ZIO - Oleksandra Holubitska](https://www.youtube.com/watch?v=5s0GOA3WQnY)\n\n[10 things I wish I'd known before using Spark in production - Himanshu Arora &amp; Nityanand Yadav](https://www.youtube.com/watch?v=YjalmDpKdY0)\n\n[QnA Session with Martin Odersky - Martin Odersky](https://www.youtube.com/watch?v=am0EV3cqa38)\n\n[How I rebuilt the Typelevel Ecosystem with Fury - Jon Pretty](https://www.youtube.com/watch?v=WBPGhnHO52w)\n\n[Building Scala with Bazel - Natan Silnitsky](https://www.youtube.com/watch?v=lT8zpzyJW7I)\n\n[LogStage: Zero-cost Structural Logging for Scala - Maksym Ratoshniuk](https://www.youtube.com/watch?v=C--lJ0RI37U)\n\n[Streaming data processing with Apache Spark - Roksolana Diachuk](https://www.youtube.com/watch?v=LZHeOeQGNbE)\n\n[From Akka to Labelled Transition Systems - Ruslan Shevchenko](https://www.youtube.com/watch?v=M60NSGXGHjE)\n\n[Why Computers Calculate Wrong - Karl Brodowsky](https://www.youtube.com/watch?v=E0iEFpqpLIM)\n\n[Spray JSON and MongoDB Queries: Insights and Simple Tricks - Andrii Lashchenko](https://www.youtube.com/watch?v=NBgKkQtydAo)\n\n[One hundred charts, one schema - Slava Schmidt](https://www.youtube.com/watch?v=IcDc-nJTlwI)\n\n[Compile Time Logic Programming in Scala - Daniel Beskin](https://www.youtube.com/watch?v=wHrdrRvC1Wg)\n\n[Build Server Protocol and beyond - Justin Kaeser](https://www.youtube.com/watch?v=7qftYND_s_c)\n\n[Love Affair Between Functional &amp; Declarative Programming - Micha\u0142 Kowalczykiewicz](https://www.youtube.com/watch?v=G-CWNeokntc)\n\n[Interesting Scala Collections - Alexander Nemish](https://www.youtube.com/watch?v=vZCE6fZrnf0)\n\n[Using monads to enforce programming style your Boss likes - Marcin Rze\u017anicki](https://www.youtube.com/watch?v=uZ7IFQTYPic)\n\n[Modern Dependency Injection for Scala - Pavel Shirshov &amp; Michael Feldman](https://www.youtube.com/watch?v=kdfAFu03t6c)\n\n[Data Processing @Spotify using Scio - Julien Tournay](https://www.youtube.com/watch?v=OMHG_p8VmcA)\n\n[Building \u200brecommender system with matrix factorization - George Yarish](https://www.youtube.com/watch?v=OItGbF-jYt8)\n\n[On denotational and implied semantics - Marco Borst](https://www.youtube.com/watch?v=xOaWxrCxD6g)\n\n[Adding Cross Multilingual Support to Wix microservices - Noam Almog](https://www.youtube.com/watch?v=gF2kqHjJ7AA)\n\n[Large love simplicity - how to build metrics on some example incidents - \u0141ukasz Filut](https://www.youtube.com/watch?v=k6fePjHnTjU)\n", "author_fullname": "t2_tp1ya", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "All Videos of ScalaUA conference are now available!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b7f1g3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 58, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 58, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553974380.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;All the videos of ScalaUA conference can be seen at&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg/videos\"&gt;https://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg/videos&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://old.reddit.com/r/ScalaConferenceVideos/\"&gt;https://old.reddit.com/r/ScalaConferenceVideos/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since this conference has exceptionally good topic selection, I am listing down the urls to all the talks below&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=-KA3BSdqYug&amp;amp;t=1s\"&gt;Thinking Functionally - John A. De Goes&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=9-2uOyRec_I\"&gt;Big Step to Functional Programming - Alex Zvolinskiy&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=AOaE0-9MYVM\"&gt;Scheduling and retrying effects with cats - Mikl\u00f3s Martin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=6z6C1EmxzaI\"&gt;Conquering Concurrency with Functional Programming - Jakub Koz\u0142owski&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=rzBWevKiVFI\"&gt;Scala Schemas with Shapeless - K\u00e9vin Rauscher&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=32RZoQOaucM\"&gt;Backpressure over the wire - when things go wrong - Zahari Dichev&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=cUG_G8ihL4Y\"&gt;Things I wish I knew when I started with Akka - Markus Jura&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=5s0GOA3WQnY\"&gt;Tour of ZIO - Oleksandra Holubitska&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=YjalmDpKdY0\"&gt;10 things I wish I&amp;#39;d known before using Spark in production - Himanshu Arora &amp;amp; Nityanand Yadav&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=am0EV3cqa38\"&gt;QnA Session with Martin Odersky - Martin Odersky&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=WBPGhnHO52w\"&gt;How I rebuilt the Typelevel Ecosystem with Fury - Jon Pretty&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=lT8zpzyJW7I\"&gt;Building Scala with Bazel - Natan Silnitsky&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=C--lJ0RI37U\"&gt;LogStage: Zero-cost Structural Logging for Scala - Maksym Ratoshniuk&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=LZHeOeQGNbE\"&gt;Streaming data processing with Apache Spark - Roksolana Diachuk&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=M60NSGXGHjE\"&gt;From Akka to Labelled Transition Systems - Ruslan Shevchenko&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=E0iEFpqpLIM\"&gt;Why Computers Calculate Wrong - Karl Brodowsky&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=NBgKkQtydAo\"&gt;Spray JSON and MongoDB Queries: Insights and Simple Tricks - Andrii Lashchenko&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=IcDc-nJTlwI\"&gt;One hundred charts, one schema - Slava Schmidt&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=wHrdrRvC1Wg\"&gt;Compile Time Logic Programming in Scala - Daniel Beskin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=7qftYND_s_c\"&gt;Build Server Protocol and beyond - Justin Kaeser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=G-CWNeokntc\"&gt;Love Affair Between Functional &amp;amp; Declarative Programming - Micha\u0142 Kowalczykiewicz&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=vZCE6fZrnf0\"&gt;Interesting Scala Collections - Alexander Nemish&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=uZ7IFQTYPic\"&gt;Using monads to enforce programming style your Boss likes - Marcin Rze\u017anicki&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=kdfAFu03t6c\"&gt;Modern Dependency Injection for Scala - Pavel Shirshov &amp;amp; Michael Feldman&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=OMHG_p8VmcA\"&gt;Data Processing @Spotify using Scio - Julien Tournay&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=OItGbF-jYt8\"&gt;Building \u200brecommender system with matrix factorization - George Yarish&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=xOaWxrCxD6g\"&gt;On denotational and implied semantics - Marco Borst&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=gF2kqHjJ7AA\"&gt;Adding Cross Multilingual Support to Wix microservices - Noam Almog&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.youtube.com/watch?v=k6fePjHnTjU\"&gt;Large love simplicity - how to build metrics on some example incidents - \u0141ukasz Filut&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b7f1g3", "is_robot_indexable": true, "report_reasons": null, "author": "know_not_much", "num_crossposts": 1, "num_comments": 11, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b7f1g3/all_videos_of_scalaua_conference_are_now_available/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b7f1g3/all_videos_of_scalaua_conference_are_now_available/", "subreddit_subscribers": 21294, "created_utc": 1553974380.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_i0jv3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "John A. De Goes at #ScalaUA - Thinking Functionally", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b7cq60", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 37, "domain": "youtube.com", "media_embed": [{"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/-KA3BSdqYug?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "title": "John A. De Goes at #ScalaUA - Thinking Functionally", "type": "video", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/-KA3BSdqYug?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Scala UA", "height": 338, "width": 600, "version": "1.0", "thumbnail_width": 480, "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/-KA3BSdqYug/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/-KA3BSdqYug?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/b7cq60", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 37, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553961215.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b7cq60", "is_robot_indexable": true, "report_reasons": null, "author": "JavaSuck", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b7cq60/john_a_de_goes_at_scalaua_thinking_functionally/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=-KA3BSdqYug", "subreddit_subscribers": 21294, "created_utc": 1553961215.0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "title": "John A. De Goes at #ScalaUA - Thinking Functionally", "type": "video", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/-KA3BSdqYug?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Scala UA", "height": 338, "width": 600, "version": "1.0", "thumbnail_width": 480, "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/-KA3BSdqYug/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_145glp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Slinky 0.6.0: featuring full React Hooks support and improved tag API type-safety", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b71o76", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "domain": "medium.com", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 33, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553888275.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b71o76", "is_robot_indexable": true, "report_reasons": null, "author": "shadaj", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b71o76/slinky_060_featuring_full_react_hooks_support_and/", "whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@shadaj/slinky-0-6-0-the-one-with-hooks-c7f36d78f103", "subreddit_subscribers": 21294, "created_utc": 1553888275.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_988o8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Mutation Testing framework Stryker4s releases version 0.3.1 with Maven plugin and HTML reporter", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b713zd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "domain": "github.com", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553885447.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b713zd", "is_robot_indexable": true, "report_reasons": null, "author": "Ghonesis", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b713zd/mutation_testing_framework_stryker4s_releases/", "whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/stryker-mutator/stryker4s/releases/tag/v0.3.1", "subreddit_subscribers": 21294, "created_utc": 1553885447.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_3l14r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ScalaUA 2019 - Video Q&amp;A session with Martin Odersky (Mar.29, 2019)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6z9wn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 13, "domain": "youtube.com", "media_embed": [{"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/wm2DhYrZVno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}], "author_flair_template_id": "d54e3a96-b7f3-11e5-8852-0e9433d361a7", "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "ScalaUA 2019 - Video Q&amp;A session with Martin Odersky, Creator of Scala, EPFL, Lightbend", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/wm2DhYrZVno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Scala UA", "thumbnail_height": 360, "thumbnail_url": "https://i.ytimg.com/vi/wm2DhYrZVno/hqdefault.jpg", "type": "video", "provider_name": "YouTube", "author_url": "https://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/wm2DhYrZVno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/b6z9wn", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": "scala-logo-flair", "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553876342.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "richtext", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Contributor - Collections", "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6z9wn", "is_robot_indexable": true, "report_reasons": null, "author": "joshlemer", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/scala/comments/b6z9wn/scalaua_2019_video_qa_session_with_martin_odersky/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=wm2DhYrZVno", "subreddit_subscribers": 21294, "created_utc": 1553876342.0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "ScalaUA 2019 - Video Q&amp;A session with Martin Odersky, Creator of Scala, EPFL, Lightbend", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/wm2DhYrZVno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Scala UA", "thumbnail_height": 360, "thumbnail_url": "https://i.ytimg.com/vi/wm2DhYrZVno/hqdefault.jpg", "type": "video", "provider_name": "YouTube", "author_url": "https://www.youtube.com/channel/UC_ZJvRHot6thpgqsXvtEvFg"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_33uicz5u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What do you usually do while you Scala code compiles?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6vcte", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 38, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553853647.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6vcte", "is_robot_indexable": true, "report_reasons": null, "author": "miklaop", "num_crossposts": 0, "num_comments": 34, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b6vcte/what_do_you_usually_do_while_you_scala_code/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b6vcte/what_do_you_usually_do_while_you_scala_code/", "subreddit_subscribers": 21294, "created_utc": 1553853647.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "for scalafmt, where would I normally go to ask questions about setting certin rules? I'd like to have imports in a certain order that is doable with intellij but gets overridden by scalafmt, an example order for example \n\n    com.mycompany.*\n\n    all other imports\n\n    java.*\n    scala.*`", "author_fullname": "t2_y9k37", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Question] Scalafmt imports order conflicting with intellij", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6ym1h", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553873005.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;for scalafmt, where would I normally go to ask questions about setting certin rules? I&amp;#39;d like to have imports in a certain order that is doable with intellij but gets overridden by scalafmt, an example order for example &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;com.mycompany.*\n\nall other imports\n\njava.*\nscala.*`\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6ym1h", "is_robot_indexable": true, "report_reasons": null, "author": "irregular_regular", "num_crossposts": 0, "num_comments": 2, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b6ym1h/question_scalafmt_imports_order_conflicting_with/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b6ym1h/question_scalafmt_imports_order_conflicting_with/", "subreddit_subscribers": 21294, "created_utc": 1553873005.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_i8ein", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Event on websocket - Akka", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b71tdw", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "discuss.lightbend.com", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553888996.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b71tdw", "is_robot_indexable": true, "report_reasons": null, "author": "zero_coding", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b71tdw/event_on_websocket_akka/", "whitelist_status": "all_ads", "stickied": false, "url": "https://discuss.lightbend.com/t/event-on-websocket/3792", "subreddit_subscribers": 21294, "created_utc": 1553888996.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "I am a beginner trying to learn Scala.\n\nThis is a small program I tried to write to calculate expressions in the correct order -\n\n    object Calc extends App {\n        while (true) {\n            val input: String = scala.io.StdIn.readLine(\"&gt; \")\n            println(evaluate(input))\n        }\n    \n    \n        def evaluate(input: String) = {\n            val finput = input.replace(\" \", \"\")\n            var elems = new Array[String](finput.length())\n            var last = elems.length\n            for (i &lt;- 0 to last - 1) {\n                elems(i) = finput.substring(i, i + 1)\n            }\n            val operators: Array[String] = Array(\"/\", \"*\", \"+\", \"-\")\n            for (i &lt;- 0 to operators.length) {\n                while (elems contains operators(i)) {\n                    val pos = elems.indexOf(operators(i))\n                    val a = elems(pos-1).toInt\n                    val b = elems(pos+1).toInt\n                    var found = 0\n                    elems(pos) match {\n                        case \"/\" =&gt; found = a/b\n                        case \"*\" =&gt; found = a*b\n                        case \"+\" =&gt; found = a+b\n                        case \"-\" =&gt; found = a-b\n                    }\n                    elems(pos-1) = found.toString()\n                    last = last - 2\n                    for (j &lt;- pos to last) {\n                        elems(j) = elems(j + 2)\n                    }\n                }\n            }\n            elems(0)\n        }\n    }\n\n&amp;#x200B;\n\nThis program does not work, I get a runtime error at elems(j) = elems(j + 2). Could someone tell me why? - It is probably a logical error and not related to Scala. \n\n  \nAlso, is the program design okay?", "author_fullname": "t2_12l6g9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Error in program", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b7138f", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553885345.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am a beginner trying to learn Scala.&lt;/p&gt;\n\n&lt;p&gt;This is a small program I tried to write to calculate expressions in the correct order -&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;object Calc extends App {\n    while (true) {\n        val input: String = scala.io.StdIn.readLine(&amp;quot;&amp;gt; &amp;quot;)\n        println(evaluate(input))\n    }\n\n\n    def evaluate(input: String) = {\n        val finput = input.replace(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;)\n        var elems = new Array[String](finput.length())\n        var last = elems.length\n        for (i &amp;lt;- 0 to last - 1) {\n            elems(i) = finput.substring(i, i + 1)\n        }\n        val operators: Array[String] = Array(&amp;quot;/&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;+&amp;quot;, &amp;quot;-&amp;quot;)\n        for (i &amp;lt;- 0 to operators.length) {\n            while (elems contains operators(i)) {\n                val pos = elems.indexOf(operators(i))\n                val a = elems(pos-1).toInt\n                val b = elems(pos+1).toInt\n                var found = 0\n                elems(pos) match {\n                    case &amp;quot;/&amp;quot; =&amp;gt; found = a/b\n                    case &amp;quot;*&amp;quot; =&amp;gt; found = a*b\n                    case &amp;quot;+&amp;quot; =&amp;gt; found = a+b\n                    case &amp;quot;-&amp;quot; =&amp;gt; found = a-b\n                }\n                elems(pos-1) = found.toString()\n                last = last - 2\n                for (j &amp;lt;- pos to last) {\n                    elems(j) = elems(j + 2)\n                }\n            }\n        }\n        elems(0)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;This program does not work, I get a runtime error at elems(j) = elems(j + 2). Could someone tell me why? - It is probably a logical error and not related to Scala. &lt;/p&gt;\n\n&lt;p&gt;Also, is the program design okay?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b7138f", "is_robot_indexable": true, "report_reasons": null, "author": "daredevildas", "num_crossposts": 0, "num_comments": 4, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b7138f/error_in_program/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b7138f/error_in_program/", "subreddit_subscribers": 21294, "created_utc": 1553885345.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_fdqk0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Foundation of FP, open source FP course in Scala (WIP)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6jkrp", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "domain": "patreon.com", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 33, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553783912.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6jkrp", "is_robot_indexable": true, "report_reasons": null, "author": "julien-truffaut", "num_crossposts": 1, "num_comments": 1, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b6jkrp/foundation_of_fp_open_source_fp_course_in_scala/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.patreon.com/posts/foundation-of-25638379", "subreddit_subscribers": 21294, "created_utc": 1553783912.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "So I am going to be starting a new data engineering job at a startup with a small data team. We will likely be using a Spark / Cassandra / Kafka type stack on a cloud service like AWS, although nothing seemed to have been decided yet. I'm quite familiar with Scala but am a data engineering noob, so not so familiar with the above-mentioned tools yet.\n\nI have always developed with IntelliJ in Windows, but I usually see speakers at conferences using Macs, and most projects on github seem to be designed by Mac / Linux users, with Windows as an afterthought. \n\nThings like sbt and scalac run fine from the Windows command line / powershell. Things that don't, like the Ammonite REPL, I've got working using WSL (Windows Subsytem for Linux) which is baked into Windows 10. Although using WSL, there is a bit of complication, because you can't (without peril of corruption) change the Linux file system from Windows apps (e.g. IntelliJ) - though modifying the Windows file system from WSL is apparently OK -, and you can't reliably run X-windows from WSL. I'm not sure how much this matters if I'm doing a lot of stuff dialling in to a cloud service.\n\nAnyway, the point is, I can request a Mac for development if I think I need it, or I can stick with Windows machines which I'm more familiar with like everyone else at the company. I have a slight preference for Windows based on historical prejudice around 1-button mice and a lack of useful things like Page Up/Down buttons.\n\nWhat is your experience and do you have any recommendations? Will it actually make much of a difference?", "author_fullname": "t2_8v0ub", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Mac vs Linux vs Windows for Scala development ???", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6iwd0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553780309.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I am going to be starting a new data engineering job at a startup with a small data team. We will likely be using a Spark / Cassandra / Kafka type stack on a cloud service like AWS, although nothing seemed to have been decided yet. I&amp;#39;m quite familiar with Scala but am a data engineering noob, so not so familiar with the above-mentioned tools yet.&lt;/p&gt;\n\n&lt;p&gt;I have always developed with IntelliJ in Windows, but I usually see speakers at conferences using Macs, and most projects on github seem to be designed by Mac / Linux users, with Windows as an afterthought. &lt;/p&gt;\n\n&lt;p&gt;Things like sbt and scalac run fine from the Windows command line / powershell. Things that don&amp;#39;t, like the Ammonite REPL, I&amp;#39;ve got working using WSL (Windows Subsytem for Linux) which is baked into Windows 10. Although using WSL, there is a bit of complication, because you can&amp;#39;t (without peril of corruption) change the Linux file system from Windows apps (e.g. IntelliJ) - though modifying the Windows file system from WSL is apparently OK -, and you can&amp;#39;t reliably run X-windows from WSL. I&amp;#39;m not sure how much this matters if I&amp;#39;m doing a lot of stuff dialling in to a cloud service.&lt;/p&gt;\n\n&lt;p&gt;Anyway, the point is, I can request a Mac for development if I think I need it, or I can stick with Windows machines which I&amp;#39;m more familiar with like everyone else at the company. I have a slight preference for Windows based on historical prejudice around 1-button mice and a lack of useful things like Page Up/Down buttons.&lt;/p&gt;\n\n&lt;p&gt;What is your experience and do you have any recommendations? Will it actually make much of a difference?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6iwd0", "is_robot_indexable": true, "report_reasons": null, "author": "FeebleGimmick", "num_crossposts": 0, "num_comments": 49, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b6iwd0/mac_vs_linux_vs_windows_for_scala_development/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b6iwd0/mac_vs_linux_vs_windows_for_scala_development/", "subreddit_subscribers": 21294, "created_utc": 1553780309.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_prric", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "User experience, scala.js, cats-effect and IO - 30 second read", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6l5dx", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "domain": "appddeevvmeanderings.blogspot.com", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553791572.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6l5dx", "is_robot_indexable": true, "report_reasons": null, "author": "Aappddeevv", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b6l5dx/user_experience_scalajs_catseffect_and_io_30/", "whitelist_status": "all_ads", "stickied": false, "url": "https://appddeevvmeanderings.blogspot.com/2019/03/user-experience-scalajs-cats-effect-io.html", "subreddit_subscribers": 21294, "created_utc": 1553791572.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_5vlel", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "IntelliJ Scala Plugin 2019.1: Highlighting For-comprehensions, Find Usages for Implicits, and More", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6818w", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 85, "domain": "blog.jetbrains.com", "media_embed": [], "author_flair_template_id": "2f5bf3d6-b8d3-11e5-bfed-0e0457222cc7", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 85, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": "kamon-logo-flair", "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553712415.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "richtext", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "IntelliJ", "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6818w", "is_robot_indexable": true, "report_reasons": null, "author": "jastice", "num_crossposts": 0, "num_comments": 5, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/scala/comments/b6818w/intellij_scala_plugin_20191_highlighting/", "whitelist_status": "all_ads", "stickied": false, "url": "https://blog.jetbrains.com/scala/2019/03/27/intellij-scala-plugin-2019-1-highlighting-for-comprehensions-find-usages-for-implicits-and-more", "subreddit_subscribers": 21294, "created_utc": 1553712415.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_fpefr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Three Layer Scala Cake", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b62v3i", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "domain": "blog.oyanglul.us", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553683038.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b62v3i", "is_robot_indexable": true, "report_reasons": null, "author": "oyanglulu", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b62v3i/three_layer_scala_cake/", "whitelist_status": "all_ads", "stickied": false, "url": "https://blog.oyanglul.us/scala/3-layer-cake", "subreddit_subscribers": 21294, "created_utc": 1553683038.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "[https://medium.com/permutive/fun-with-mutually-recursive-typeclass-resolution-85934995197c](https://medium.com/permutive/fun-with-mutually-recursive-typeclass-resolution-85934995197c)", "author_fullname": "t2_34ezru95", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Fun with mutually recursive typeclass resolution", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b63r9w", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553688969.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://medium.com/permutive/fun-with-mutually-recursive-typeclass-resolution-85934995197c\"&gt;https://medium.com/permutive/fun-with-mutually-recursive-typeclass-resolution-85934995197c&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b63r9w", "is_robot_indexable": true, "report_reasons": null, "author": "TimWSpence", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b63r9w/fun_with_mutually_recursive_typeclass_resolution/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b63r9w/fun_with_mutually_recursive_typeclass_resolution/", "subreddit_subscribers": 21294, "created_utc": 1553688969.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "Hi all,\n\n&amp;#x200B;\n\nWe've just added a Scala Play server stub generator (beta) to the OpenAPI Generator project ([https://github.com/OpenAPITools/openapi-generator](https://github.com/OpenAPITools/openapi-generator)) and would appreciate if you can try it out and let us know if you've any feedback or question for us. To try it out, just follow 3 steps:\n\n&amp;#x200B;\n\n1. Download the Java JAR ([https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/4.0.0-SNAPSHOT/openapi-generator-cli-4.0.0-20190328.175824-475.jar](https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/4.0.0-SNAPSHOT/openapi-generator-cli-4.0.0-20190328.175824-475.jar))\n2. Rename the JAR as \"openapi-generator-cli.jar\"\n3. Run the following command to generate a Scala Play server stub for Petstore API ([https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2\\_0/petstore.yaml](https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml)):\n\n&amp;#x200B;\n\nMac/Linux:\n\n\\- java -jar openapi-generator-cli.jar generate -g scala-play-server -i [https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2\\_0/petstore.yaml](https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml) \\-o /var/tmp/scala-play-petstore/\n\n&amp;#x200B;\n\nWindows:\n\n\\- java -jar openapi-generator-cli.jar generate -g scala-play-server -i [https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2\\_0/petstore.yaml](https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml) \\-o C:\\\\tmp\\\\scala-play-petstore\n\n&amp;#x200B;\n\nI hope you will find the new generator useful.\n\n&amp;#x200B;\n\nThanks,\n\nWilliam", "author_fullname": "t2_k05yv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Generate Scala Play server stub using OpenAPI Generator in 3 steps", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5zb53", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "thumbnail": "", "edited": true, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553656420.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;ve just added a Scala Play server stub generator (beta) to the OpenAPI Generator project (&lt;a href=\"https://github.com/OpenAPITools/openapi-generator\"&gt;https://github.com/OpenAPITools/openapi-generator&lt;/a&gt;) and would appreciate if you can try it out and let us know if you&amp;#39;ve any feedback or question for us. To try it out, just follow 3 steps:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Download the Java JAR (&lt;a href=\"https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/4.0.0-SNAPSHOT/openapi-generator-cli-4.0.0-20190328.175824-475.jar\"&gt;https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/4.0.0-SNAPSHOT/openapi-generator-cli-4.0.0-20190328.175824-475.jar&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;Rename the JAR as &amp;quot;openapi-generator-cli.jar&amp;quot;&lt;/li&gt;\n&lt;li&gt;Run the following command to generate a Scala Play server stub for Petstore API (&lt;a href=\"https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml\"&gt;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml&lt;/a&gt;):&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Mac/Linux:&lt;/p&gt;\n\n&lt;p&gt;- java -jar openapi-generator-cli.jar generate -g scala-play-server -i &lt;a href=\"https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml\"&gt;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml&lt;/a&gt; -o /var/tmp/scala-play-petstore/&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Windows:&lt;/p&gt;\n\n&lt;p&gt;- java -jar openapi-generator-cli.jar generate -g scala-play-server -i &lt;a href=\"https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml\"&gt;https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml&lt;/a&gt; -o C:\\tmp\\scala-play-petstore&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I hope you will find the new generator useful.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks,&lt;/p&gt;\n\n&lt;p&gt;William&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5zb53", "is_robot_indexable": true, "report_reasons": null, "author": "wing328", "num_crossposts": 0, "num_comments": 2, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b5zb53/generate_scala_play_server_stub_using_openapi/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b5zb53/generate_scala_play_server_stub_using_openapi/", "subreddit_subscribers": 21294, "created_utc": 1553656420.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "Hey everyone,\n\nI have more of an architecture-best-solution type of question.\n\nThere is an external service that creates .json files in a given directory.  These files are likely to appear at a rate of about \\~10 per second each having size of roughly 50kb to say...though more infrequently... 12 MB.  I want my Scala app to parse these .json files as they are created, decode them, filter/map, and basically just process them and put them onto some kafka cluster or some store.  What I do after data processing is not too important here.\n\n&amp;#x200B;\n\nThe question is: what is the most fastest and then most scalable way to read/process these files.  I was thinking of using java.nio and use WatchService to catch ENTRY\\_CREATE events from the directory then I just notify an actor to do the decoding/processing.  I also thought of using Akka Streams with Source being the file, but I am not sure if that's what I need.\n\nI have rudimentary actor implementation experience so I apologize beforehand.\n\n&amp;#x200B;\n\nThank you for your help", "author_fullname": "t2_59kc6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ways to handle file system change events and akka streams (?)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5zf8r", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "domain": "self.scala", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "thumbnail": "", "edited": true, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553657150.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone,&lt;/p&gt;\n\n&lt;p&gt;I have more of an architecture-best-solution type of question.&lt;/p&gt;\n\n&lt;p&gt;There is an external service that creates .json files in a given directory.  These files are likely to appear at a rate of about ~10 per second each having size of roughly 50kb to say...though more infrequently... 12 MB.  I want my Scala app to parse these .json files as they are created, decode them, filter/map, and basically just process them and put them onto some kafka cluster or some store.  What I do after data processing is not too important here.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The question is: what is the most fastest and then most scalable way to read/process these files.  I was thinking of using java.nio and use WatchService to catch ENTRY_CREATE events from the directory then I just notify an actor to do the decoding/processing.  I also thought of using Akka Streams with Source being the file, but I am not sure if that&amp;#39;s what I need.&lt;/p&gt;\n\n&lt;p&gt;I have rudimentary actor implementation experience so I apologize beforehand.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thank you for your help&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5zf8r", "is_robot_indexable": true, "report_reasons": null, "author": "SirLag", "num_crossposts": 0, "num_comments": 3, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b5zf8r/ways_to_handle_file_system_change_events_and_akka/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/scala/comments/b5zf8r/ways_to_handle_file_system_change_events_and_akka/", "subreddit_subscribers": 21294, "created_utc": 1553657150.0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "scala", "selftext": "", "author_fullname": "t2_37mmv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "SIP: Simplifying the Scala getting started experience", "link_flair_richtext": [], "subreddit_name_prefixed": "r/scala", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5nspd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 43, "domain": "contributors.scala-lang.org", "media_embed": [], "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": null, "link_flair_text": null, "can_mod_post": false, "score": 43, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553594437.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh37", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5nspd", "is_robot_indexable": true, "report_reasons": null, "author": "alexeyr", "num_crossposts": 0, "num_comments": 1, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/scala/comments/b5nspd/sip_simplifying_the_scala_getting_started/", "whitelist_status": "all_ads", "stickied": false, "url": "https://contributors.scala-lang.org/t/proposal-simplifying-the-scala-getting-started-experience/2978", "subreddit_subscribers": 21294, "created_utc": 1553594437.0, "is_video": false}}], "after": "t3_b5nspd", "before": null}}